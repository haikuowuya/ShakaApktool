/**
 *  Copyright 2015 Rover12421 <rover12421@163.com>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

gradle.allprojects {

    ext.getCheckedOutGitCommitHashFromGit = { gitFolder ->
        def takeFromHash = 7

        def head
        try {
            head = new File(gitFolder, "HEAD").text.split(":")
        } catch(Exception e) {
            return null;
        }

        def isCommit = head.length == 1
        if(isCommit) return head[0].trim().take(takeFromHash)

        def refHead = new File(gitFolder + head[1].trim())
        refHead.text.trim().take takeFromHash
    }

    ext.getCheckedOutBranchFromGit = { gitFolder ->
        def head
        try {
            head = new File(gitFolder, "HEAD").text.split("/")
            return head[2].trim();
        } catch(Exception e) {
            return "SNAPSHOT";
        }
    }

    ext.getCheckedOutGitCommitHashFromProject = {getCheckedOutGitCommitHashFromGit("$projectDir/.git/")}
    ext.getCheckedOutBranchFromProject = {getCheckedOutBranchFromGit("$projectDir/.git/")}

    ext.getCheckedOutGitCommitHashFromModule = { moduleName ->
        getCheckedOutGitCommitHashFromGit("$rootProject.projectDir/.git/modules/$moduleName/")
    }

    ext.getCheckedOutBranchFromModule = { moduleName ->
        getCheckedOutBranchFromGit("$rootProject.projectDir/.git/modules/$moduleName/")
    }
}
