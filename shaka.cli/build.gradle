/**
 *  Copyright 2015 Rover12421 <rover12421@163.com>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

configurations {
    proguard
}

dependencies {
    compile project(':shaka.apktool')

    proguard depends.proguard
}

gradle.taskGraph.whenReady {
    fatJar {
        manifest {
            attributes("Main-Class": "com.rover12421.shaka.cli.Main")
        }
    }
}

task proguard(type: JavaExec, dependsOn: fatJar) {
    def outFile = jar.destinationDir.getPath() + '/' + "ShakaApktool" + '_' + shakaVersion + '-release' + '.' + jar.extension
    inputs.file jar.archivePath
    outputs.file outFile

    def mappingFile = new File(new File(outFile).getParentFile(), "mapping.txt");

    classpath = configurations.proguard
    main = 'proguard.ProGuard'
    args '-injars ' + "${jar.archivePath}" + ' (!META-INF/LICENSE.txt,!META-INF/NOTICE.txt,!README)'
    args "-outjars ${outFile}"
    args "-libraryjars ${System.properties['java.home']}/lib/rt.jar"
    args "-printmapping ${mappingFile}"
//    args '-dontobfuscate'
//    args "-obfuscationdictionary ${keywordsFile}"
//    args "-classobfuscationdictionary ${keywordsFile}"
//    args "-packageobfuscationdictionary ${keywordsFile}"
    args '-dontoptimize'
    args '-dontnote **'
//    args '-ignorewarnings'
    args '-dontwarn com.google.common.base.**'
    args '-dontwarn com.google.common.collect.**'
    args '-dontwarn com.google.common.util.**'
    args '-dontwarn javax.xml.xpath.**'
    args '-dontwarn com.rover12421.shaka.**'
    args '-dontwarn brut.androlib.**'
    args '-dontwarn org.jf.dexlib2.**'
    args '-keep public class Main { public static void main(java.lang.String[]); }'
    args '-keep public class com.rover12421.shaka.cli.Main { public static void main(java.lang.String[]); }'
    args '-keep class org.yaml.snakeyaml.** { public protected private *; }'
    args '-keepclassmembers enum * { public static **[] values(); public static ** valueOf(java.lang.String); }'
    args '-keepclassmembers class brut.apktool.Main { *** normalOptions; *** DecodeOptions; *** BuildOptions; *** frameOptions; *** allOptions; *** emptyOptions; *** verbosityHelp(); *** _Options(); }'
    args '-keepclassmembers class org.jf.smali.main { *** basicOptions; *** debugOptions; *** options; }'
    args '-keepclassmembers class org.jf.baksmali.main { *** basicOptions; *** debugOptions; *** options; }'
    args '-keepclassmembers class brut.androlib.Androlib { *** mResUnknownFiles; }'
    args '-keepclassmembers class brut.androlib.res.data.value.ResBagValue { *** mParent; }'
    args '-keepclassmembers class brut.androlib.res.data.value.ResStyleValue { *** mItems; }'
    args '-keepclassmembers class brut.androlib.res.decoder.ResFileDecoder { *** mDecoders; }'
    args '-keepclassmembers class brut.androlib.res.decoder.AXmlResourceParser { *** mAttrDecoder; *** m_attributes; *** m_strings; *** android_ns; *** getAttributeOffset(...);}'
    args '-keepclassmembers class org.jf.dexlib2.dexbacked.DexBackedMethodImplementation { *** codeOffset; }'
    args '-keepclassmembers class brut.androlib.res.data.ResPackage { *** mResTable; }'
    args '-keepclassmembers class brut.androlib.res.decoder.ARSCDecoder { *** mIn; *** mPkg; *** mType; *** mHeader; *** mTableStrings; *** nextChunkCheckType(...); *** nextChunk(...); *** readPackage(...); }'
    args '-keepclassmembers class brut.androlib.res.data.ResResSpec { *** mName; }'
}

tasks.getByPath(':release').dependsOn(proguard)
